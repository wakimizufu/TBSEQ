/*
トラック格納情報を定義
*/

#ifndef trackMap_h
#define trackMap_h


/*
trackStep トラックステップの各種情報を定義
*/


//trackStep:総バイト数
#define TRACKSTEP_ALLBYTE 2

class trackStep {
public:
	unsigned char    bank;       //演奏バンク   (0:BANK A ～ 3:BANK D)
	unsigned char    pattern;    //演奏パターン (NOTE_PWM_INDEX::NOTE_C2～NOTE_PWM_INDEX::NOTE_C3⇒0x0～0xD を設定)
	unsigned char    transport;  //転調         (NOTE_PWM_INDEX::NOTE_C2～NOTE_PWM_INDEX::NOTE_C3⇒0x0～0xD を設定)
	bool lastStep; //最終ステップ(最終パターン:1,通常パターン:0)

	/*
	コンストラクタ
	*/
	explicit trackStep() {
		bank		=	0;
		pattern		=	static_cast<unsigned char>(NOTE_PWM_INDEX::NOTE_C2);
		transport	=	static_cast<unsigned char>(NOTE_PWM_INDEX::NOTE_C2);
		lastStep = true;
	}

private:
};

/*
track トラック内の全トラックステップを管理する
*/

//step:ステップ開始インデックス
#define TRACK_STEP_START_IDX 0

//step:1パターン内の全ステップ数
#define TRACK_STEP_LENGTH 16


class track {
public:
	trackStep trackSteps[TRACK_STEP_LENGTH];

	/*
	コンストラクタ
	*/
	explicit track() {
	}

private:

};




/*
trackMap パターンを管理する
*/

//trackMap:パターン開始インデックス
#define TRACKMAP_START_IDX 0

//trackMap:パターン全数
#define TRACKMAP_TRACK_LENGTH 13

//trackMap:1トラック総バイト数
const int TRACK_ALLBYTE = TRACK_STEP_LENGTH * TRACKSTEP_ALLBYTE;

//trackMap:全13トラック全数
const int TRACKMAP_ALLBYTE = TRACKMAP_TRACK_LENGTH * TRACK_STEP_LENGTH * TRACKSTEP_ALLBYTE;

//trackMap:FRAM格納先頭アドレス
#define TRACKMAP_START_ADDRESS 0x400

class trackMap {
public:

	//パターン配列
	track tracks[TRACKMAP_TRACK_LENGTH];

	/*
	コンストラクタ
	 */
	explicit trackMap() {
	}

	/*
ビットストリームからパターン配列を設定する
引数:指定トラック番号,ビットストリーム
*/
	void setBitstream(int t, unsigned char* _bitstream) {

		int _bitInd = 0;
		unsigned char _byte = 0;

		if ( ( t < 0) || (t >= TRACKMAP_TRACK_LENGTH) ){
			t = 0;
		}

		for (int s = 0; s < TRACK_STEP_LENGTH; s++) {

			_byte = *(_bitstream + _bitInd);

			//演奏パターン (1～8:0x0～0x7)
			//tracks[t].trackSteps[s].pattern = (0x07 & _byte) + static_cast<unsigned char>(NOTE_PWM_INDEX::NOTE_C2);
            tracks[t].trackSteps[s].pattern = (0x07 & _byte);  

			//演奏バンク   (0:BANK A ～ 3:BANK D)
			tracks[t].trackSteps[s].bank 	= ((0x18 & _byte) >> 3);

			//bit:5 最終ステップ(true:最終ステップ ,false:通常ステップ)
			tracks[t].trackSteps[s].lastStep = (0x20 == (0x20 & _byte)); 
			_bitInd++;

			_byte = *(_bitstream + _bitInd);

			//転調( NOTE_PWM_INDEX::NOTE_C2～NOTE_PWM_INDEX::NOTE_C3 を設定)
			tracks[t].trackSteps[s].transport = (0x0F & _byte) + static_cast<unsigned char>(NOTE_PWM_INDEX::NOTE_C2);

			_bitInd++;
		}

	}

	/*
	パターン配列からビットストリームに設定する
	引数:指定トラック番号,設定先ビットストリーム
	*/
	void getBitstream(int t, unsigned char* _bitstream) {

		int _bitInd = 0;
		unsigned char _byte = 0;

		if ( ( t < 0) || (t >= TRACKMAP_TRACK_LENGTH) ){
			t = 0;
		}


		for (int s = 0; s < TRACK_STEP_LENGTH; s++) {

			_byte = 0x00;

			//演奏パターン (1～8:0x0～0x7)
			_byte = tracks[t].trackSteps[s].pattern - static_cast<unsigned char>(NOTE_PWM_INDEX::NOTE_C2);

			//演奏バンク   (0:BANK A ～ 3:BANK D)
			_byte = _byte | tracks[t].trackSteps[s].bank << 3;

			//bit:5 最終ステップ(true:最終ステップ ,false:通常ステップ)
			if (tracks[t].trackSteps[s].lastStep) { _byte = _byte ^ 0x20; }

			*(_bitstream + _bitInd) = _byte;
			_bitInd++;

			//転調( NOTE_PWM_INDEX::NOTE_C2～NOTE_PWM_INDEX::NOTE_C3 を設定)	
			_byte = tracks[t].trackSteps[s].transport - static_cast<unsigned char>(NOTE_PWM_INDEX::NOTE_C2);
			*(_bitstream + _bitInd) = _byte;
			_bitInd++;
		}
	}

private:
};


/*
 presetTrackBitstream デフォルトのトラップ情報を管理する
*/
class presetTrackBitstream {
public:
	/*
	トラック情報 ビットストリーム
	☆総バイト数  :0x019F=416Byte
		0x0000:trackMap開始
			0x0000:トラック1
			0x0020:トラック2
			0x0040:トラック3
			0x0060:トラック4
			0x0080:トラック5
			0x00A0:トラック6
			0x00C0:トラック7
			0x00E0:トラック8
			0x0100:トラック9
			0x0120:トラック10
			0x0140:トラック11
			0x0160:トラック12
			0x0180:トラック13

		0x0000:トラック
			0x0000:演奏パターン1
			0x0002:演奏パターン2
			0x0004:演奏パターン3
			0x0006:演奏パターン4
			0x0008:演奏パターン5
			0x000A:演奏パターン6
			0x000C:演奏パターン7
			0x000E:演奏パターン8
			0x0010:演奏パターン9
			0x0012:演奏パターン10
			0x0014:演奏パターン11
			0x0016:演奏パターン12
			0x0018:演奏パターン13
			0x001A:演奏パターン14
			0x001C:演奏パターン15
			0x001E:演奏パターン16

		[ステップ]
		1Byte:
			bit6-7:(未使用:全て0)
			bit  5:最終ステップ(最終ステップ:1,通常ステップ:0)
			bit4-3:演奏バンク(1～4:0x0～0x3)
			bit2-0:演奏パターン(1～8:0x0～0x7)

		1Byte:
			bit4-7:(未使用:全て0)
			bit3-0:転調(NOTE_PWM_INDEX::NOTE_C2～NOTE_PWM_INDEX::NOTE_C3⇒0x0～0xD を設定)
	*/
	unsigned char track_preset_bitstream[TRACKMAP_ALLBYTE]{
	0x00,0x00, 0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 0x06,0x00, 0x07,0x00, 0x00,0x00, 0x01,0x00, 0x02,0x00, 0x03,0x00, 0x04,0x00, 0x05,0x00, 0x06,0x00, 0x27,0x00,	//トラック1
	0x08,0x00, 0x09,0x00, 0x0A,0x00, 0x0B,0x00, 0x0C,0x00, 0x0D,0x00, 0x0E,0x00, 0x0F,0x00, 0x08,0x00, 0x09,0x00, 0x0A,0x00, 0x0B,0x00, 0x0C,0x00, 0x0D,0x00, 0x0E,0x00, 0x2F,0x00,	//トラック2
	0x10,0x00, 0x11,0x00, 0x12,0x00, 0x13,0x00, 0x14,0x00, 0x15,0x00, 0x16,0x00, 0x17,0x00, 0x10,0x00, 0x11,0x00, 0x12,0x00, 0x13,0x00, 0x14,0x00, 0x15,0x00, 0x16,0x00, 0x37,0x00,	//トラック3
	0x18,0x00, 0x19,0x00, 0x1A,0x00, 0x1B,0x00, 0x1C,0x00, 0x1D,0x00, 0x1E,0x00, 0x1F,0x00, 0x18,0x00, 0x19,0x00, 0x1A,0x00, 0x1B,0x00, 0x1C,0x00, 0x1D,0x00, 0x1E,0x00, 0x3F,0x00,	//トラック4
	0x00,0x02, 0x01,0x02, 0x02,0x02, 0x03,0x02, 0x04,0x02, 0x05,0x02, 0x06,0x02, 0x07,0x02, 0x00,0x02, 0x01,0x02, 0x02,0x02, 0x03,0x02, 0x04,0x02, 0x05,0x02, 0x06,0x02, 0x27,0x02,	//トラック5
	0x08,0x02, 0x09,0x02, 0x0A,0x02, 0x0B,0x02, 0x0C,0x02, 0x0D,0x02, 0x0E,0x02, 0x0F,0x02, 0x08,0x02, 0x09,0x02, 0x0A,0x02, 0x0B,0x02, 0x0C,0x02, 0x0D,0x02, 0x0E,0x02, 0x2F,0x02,	//トラック6
	0x10,0x02, 0x11,0x02, 0x12,0x02, 0x13,0x02, 0x14,0x02, 0x15,0x02, 0x16,0x02, 0x17,0x02, 0x10,0x02, 0x11,0x02, 0x12,0x02, 0x13,0x02, 0x14,0x02, 0x15,0x02, 0x16,0x02, 0x37,0x02,	//トラック7
	0x18,0x02, 0x19,0x02, 0x1A,0x02, 0x1B,0x02, 0x1C,0x02, 0x1D,0x02, 0x1E,0x02, 0x1F,0x02, 0x18,0x02, 0x19,0x02, 0x1A,0x02, 0x1B,0x02, 0x1C,0x02, 0x1D,0x02, 0x1E,0x02, 0x3F,0x02,	//トラック8
	0x00,0x05, 0x01,0x05, 0x02,0x05, 0x03,0x05, 0x04,0x05, 0x05,0x05, 0x06,0x05, 0x07,0x05, 0x00,0x05, 0x01,0x05, 0x02,0x05, 0x03,0x05, 0x04,0x05, 0x05,0x05, 0x06,0x05, 0x27,0x05,	//トラック9
	0x08,0x05, 0x09,0x05, 0x0A,0x05, 0x0B,0x05, 0x0C,0x05, 0x0D,0x05, 0x0E,0x05, 0x0F,0x05, 0x08,0x05, 0x09,0x05, 0x0A,0x05, 0x0B,0x05, 0x0C,0x05, 0x0D,0x05, 0x0E,0x05, 0x2F,0x05,	//トラック10
	0x10,0x05, 0x11,0x05, 0x12,0x05, 0x13,0x05, 0x14,0x05, 0x15,0x05, 0x16,0x05, 0x17,0x05, 0x10,0x05, 0x11,0x05, 0x12,0x05, 0x13,0x05, 0x14,0x05, 0x15,0x05, 0x16,0x05, 0x37,0x05,	//トラック11
	0x18,0x05, 0x19,0x05, 0x1A,0x05, 0x1B,0x05, 0x1C,0x05, 0x1D,0x05, 0x1E,0x05, 0x1F,0x05, 0x18,0x05, 0x19,0x05, 0x1A,0x05, 0x1B,0x05, 0x1C,0x05, 0x1D,0x05, 0x1E,0x05, 0x3F,0x05,	//トラック12
	0x00,0x0D, 0x01,0x0D, 0x02,0x0D, 0x03,0x0D, 0x04,0x0D, 0x05,0x0D, 0x06,0x0D, 0x07,0x0D, 0x00,0x0D, 0x01,0x0D, 0x02,0x0D, 0x03,0x0D, 0x04,0x0D, 0x05,0x0D, 0x06,0x0D, 0x27,0x0D	//トラック13	
	};


	/*
	コンストラクタ
	*/
	explicit presetTrackBitstream() {
	}



private:
};


#endif
