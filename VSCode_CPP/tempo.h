/*
テンポボリュームを定期的に更新/値を返す
*/

#ifndef tempo_h
#define tempo_h

/* #include "Arduino.h" */
#include "countTriger.h"

//読み取り間隔カウンタ閾値 10msec (500ns * 20000カウント)
#define THD_TEMPO 20000
#define TEMPO_CNV_ROW_MAX 256
#define TEMPO_CNV_COL_MAX 2

#define TEMPO_COL_TEMPO 0
#define TEMPO_COL_COUNT 1

class tempo: public countTriger
{
  public:

		/*
		コンストラクタ
		start     :カウンタ開始値(デフォルト=0)
		*/
    explicit tempo(unsigned int start = 0):countTriger(	THD_TEMPO	,	start)	{
			_adc_value	=	0;
		}

		/*
		[仮想関数]カウンタ閾値に達した⇒MIDIクロックがカウントアップをセット
		*/
    virtual void trigger(){
			//_adc_value	=	analogRead(0);
			_adc_value	=	100;
		};

		/*
		テンポ値を取得する
		戻り値:テンポ値(30～285)
		*/
		int	getTempo(){
			return	convertArray[_adc_value][TEMPO_COL_TEMPO];
		}

		/*
		テンポに対する500nsカウント閾値を取得する
		戻り値:500nsカウント閾値
		*/
		int	getCountThd(){
			return	convertArray[_adc_value][TEMPO_COL_COUNT];
		}

  protected:
    int	_adc_value;	//ADC読み取り値

		//ADC読み取り値(インデックス)⇒テンポ値/500nsカウント閾値配列({テンポ値,500nsカウンタ閾値})
		int convertArray[TEMPO_CNV_ROW_MAX][TEMPO_CNV_COL_MAX]	={
			{	30	,	2778	},
			{	31	,	2688	},
			{	32	,	2604	},
			{	33	,	2525	},
			{	34	,	2451	},
			{	35	,	2381	},
			{	36	,	2315	},
			{	37	,	2252	},
			{	38	,	2193	},
			{	39	,	2137	},
			{	40	,	2083	},
			{	41	,	2033	},
			{	42	,	1984	},
			{	43	,	1938	},
			{	44	,	1894	},
			{	45	,	1852	},
			{	46	,	1812	},
			{	47	,	1773	},
			{	48	,	1736	},
			{	49	,	1701	},
			{	50	,	1667	},
			{	51	,	1634	},
			{	52	,	1603	},
			{	53	,	1572	},
			{	54	,	1543	},
			{	55	,	1515	},
			{	56	,	1488	},
			{	57	,	1462	},
			{	58	,	1437	},
			{	59	,	1412	},
			{	60	,	1389	},
			{	61	,	1366	},
			{	62	,	1344	},
			{	63	,	1323	},
			{	64	,	1302	},
			{	65	,	1282	},
			{	66	,	1263	},
			{	67	,	1244	},
			{	68	,	1225	},
			{	69	,	1208	},
			{	70	,	1190	},
			{	71	,	1174	},
			{	72	,	1157	},
			{	73	,	1142	},
			{	74	,	1126	},
			{	75	,	1111	},
			{	76	,	1096	},
			{	77	,	1082	},
			{	78	,	1068	},
			{	79	,	1055	},
			{	80	,	1042	},
			{	81	,	1029	},
			{	82	,	1016	},
			{	83	,	1004	},
			{	84	,	992	},
			{	85	,	980	},
			{	86	,	969	},
			{	87	,	958	},
			{	88	,	947	},
			{	89	,	936	},
			{	90	,	926	},
			{	91	,	916	},
			{	92	,	906	},
			{	93	,	896	},
			{	94	,	887	},
			{	95	,	877	},
			{	96	,	868	},
			{	97	,	859	},
			{	98	,	850	},
			{	99	,	842	},
			{	100	,	833	},
			{	101	,	825	},
			{	102	,	817	},
			{	103	,	809	},
			{	104	,	801	},
			{	105	,	794	},
			{	106	,	786	},
			{	107	,	779	},
			{	108	,	772	},
			{	109	,	765	},
			{	110	,	758	},
			{	111	,	751	},
			{	112	,	744	},
			{	113	,	737	},
			{	114	,	731	},
			{	115	,	725	},
			{	116	,	718	},
			{	117	,	712	},
			{	118	,	706	},
			{	119	,	700	},
			{	120	,	694	},
			{	121	,	689	},
			{	122	,	683	},
			{	123	,	678	},
			{	124	,	672	},
			{	125	,	667	},
			{	126	,	661	},
			{	127	,	656	},
			{	128	,	651	},
			{	129	,	646	},
			{	130	,	641	},
			{	131	,	636	},
			{	132	,	631	},
			{	133	,	627	},
			{	134	,	622	},
			{	135	,	617	},
			{	136	,	613	},
			{	137	,	608	},
			{	138	,	604	},
			{	139	,	600	},
			{	140	,	595	},
			{	141	,	591	},
			{	142	,	587	},
			{	143	,	583	},
			{	144	,	579	},
			{	145	,	575	},
			{	146	,	571	},
			{	147	,	567	},
			{	148	,	563	},
			{	149	,	559	},
			{	150	,	556	},
			{	151	,	552	},
			{	152	,	548	},
			{	153	,	545	},
			{	154	,	541	},
			{	155	,	538	},
			{	156	,	534	},
			{	157	,	531	},
			{	158	,	527	},
			{	159	,	524	},
			{	160	,	521	},
			{	161	,	518	},
			{	162	,	514	},
			{	163	,	511	},
			{	164	,	508	},
			{	165	,	505	},
			{	166	,	502	},
			{	167	,	499	},
			{	168	,	496	},
			{	169	,	493	},
			{	170	,	490	},
			{	171	,	487	},
			{	172	,	484	},
			{	173	,	482	},
			{	174	,	479	},
			{	175	,	476	},
			{	176	,	473	},
			{	177	,	471	},
			{	178	,	468	},
			{	179	,	466	},
			{	180	,	463	},
			{	181	,	460	},
			{	182	,	458	},
			{	183	,	455	},
			{	184	,	453	},
			{	185	,	450	},
			{	186	,	448	},
			{	187	,	446	},
			{	188	,	443	},
			{	189	,	441	},
			{	190	,	439	},
			{	191	,	436	},
			{	192	,	434	},
			{	193	,	432	},
			{	194	,	430	},
			{	195	,	427	},
			{	196	,	425	},
			{	197	,	423	},
			{	198	,	421	},
			{	199	,	419	},
			{	200	,	417	},
			{	201	,	415	},
			{	202	,	413	},
			{	203	,	411	},
			{	204	,	408	},
			{	205	,	407	},
			{	206	,	405	},
			{	207	,	403	},
			{	208	,	401	},
			{	209	,	399	},
			{	210	,	397	},
			{	211	,	395	},
			{	212	,	393	},
			{	213	,	391	},
			{	214	,	389	},
			{	215	,	388	},
			{	216	,	386	},
			{	217	,	384	},
			{	218	,	382	},
			{	219	,	381	},
			{	220	,	379	},
			{	221	,	377	},
			{	222	,	375	},
			{	223	,	374	},
			{	224	,	372	},
			{	225	,	370	},
			{	226	,	369	},
			{	227	,	367	},
			{	228	,	365	},
			{	229	,	364	},
			{	230	,	362	},
			{	231	,	361	},
			{	232	,	359	},
			{	233	,	358	},
			{	234	,	356	},
			{	235	,	355	},
			{	236	,	353	},
			{	237	,	352	},
			{	238	,	350	},
			{	239	,	349	},
			{	240	,	347	},
			{	241	,	346	},
			{	242	,	344	},
			{	243	,	343	},
			{	244	,	342	},
			{	245	,	340	},
			{	246	,	339	},
			{	247	,	337	},
			{	248	,	336	},
			{	249	,	335	},
			{	250	,	333	},
			{	251	,	332	},
			{	252	,	331	},
			{	253	,	329	},
			{	254	,	328	},
			{	255	,	327	},
			{	256	,	326	},
			{	257	,	324	},
			{	258	,	323	},
			{	259	,	322	},
			{	260	,	321	},
			{	261	,	319	},
			{	262	,	318	},
			{	263	,	317	},
			{	264	,	316	},
			{	265	,	314	},
			{	266	,	313	},
			{	267	,	312	},
			{	268	,	311	},
			{	269	,	310	},
			{	270	,	309	},
			{	271	,	308	},
			{	272	,	306	},
			{	273	,	305	},
			{	274	,	304	},
			{	275	,	303	},
			{	276	,	302	},
			{	277	,	301	},
			{	278	,	300	},
			{	279	,	299	},
			{	280	,	298	},
			{	281	,	297	},
			{	282	,	296	},
			{	283	,	294	},
			{	284	,	293	},
			{	285	,	292	}
		};

};

#endif